@import xqt.adapters.builtin.*
@import com.vaiona.commons.data.*;
@import com.vaiona.commons.types.*;

@args() {
    String namespace,
    String BaseClassName,
    String RecordClassName,
    String EntityClassName,
    String ReaderClassName,
    String LeftClassName,
    String RightClassName,
    String TargetRowType,
    String Where,
    Map<AttributeInfo, String> Ordering,
    Integer skip,
    Integer take,
    String joinType,
    String joinOperator,
    String leftJoinKey,
    String rightJoinKey,
    List<AttributeInfo> Mid
}

package @(namespace);

import @(namespace).*;
import com.vaiona.commons.data.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.logging.Level;
import java.util.logging.Logger;

public class @(ReaderClassName) implements DataReader<@(TargetRowType), @(LeftClassName), @(RightClassName)> {

    public List<@(TargetRowType)> read(List<@(LeftClassName)> source1, List<@(RightClassName)> source2)  throws FileNotFoundException, IOException {
        @if(Ordering!= null && Ordering.size() > 0) {
        Comparator<@(TargetRowType)> sorter = new Comparator<@(TargetRowType)>() {
                    @@Override
                    public int compare(@(TargetRowType) left, @(TargetRowType) right){
                    @for (Map.Entry<AttributeInfo, String> entry : Ordering.entrySet()) {
                        @{
                            DataTypeInfo dti = TypeSystem.getTypes().get(entry.getKey().conceptualDataType);
                            AttributeInfo ad = entry.getKey();
                        }
                        @if(Ordering.size() == 1) {                            
                            @if(entry.getValue().toUpperCase().equals("ASC")){
                                return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                            } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                            }
                        } else {
                            @if(entry_isFirst){
                                if(@(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name))) != 0){
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            } else if (!entry_isFirst && !entry_isLast) { 
                                else if(@(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name))) != 0){
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            } else if (entry_isLast) {
                                else {
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            }
                        }
                    }
               }
            };
        }
        @if(joinType.equalsIgnoreCase("")){
            List<@(TargetRowType)> result = 
            source1.stream()
                @if(TargetRowType!= null && !TargetRowType.equals(LeftClassName)) {
                    .map(p -> new @(TargetRowType)(p))
                    .map(p->p.populate())
                }
                @if(Where!= null && !Where.isEmpty()) {
                    .filter(p -> (p.isValid == true) && (@Where))
                }
                else{
                    .filter(p -> (p.isValid == true) )
                }
                @if(Ordering!= null && Ordering.size() > 0) {
                   .sorted(sorter)
                }

                @if(skip > -1){
                    .skip(@(skip))
                }
                @if(take > -1){
                    .limit(@(take))
                }
                @/ When the target row type is different, a conversion is required here.
                @/ This is the case when reading from a variable to an inline perspective
                @/ Also the aggregation case should be handled here, maybe in a similar way.
                    .collect(Collectors.toList())
                ;
            return result;
        } else { 
        @/ here is the code block to read data from both the left and right sources, merge and apply the present clauses.
        @//////////////////////////////////////////////////////////////////////
            long skipped =0, taken =0;
            List<@(TargetRowType)> result = new ArrayList<>();
            for(@(LeftClassName) leftEntity: source1){
                @if(take > -1 && (Ordering == null || Ordering.size() <= 0)){
                    if(taken >= @(take)) break;
                }
                for(@(RightClassName) rightEntity: source2){
                    @/ if you rename the rowEntity, then its reference in DataReaderBuilder.extractUsedAttributes method should also change.
                    @(TargetRowType) rowEntity = new @(TargetRowType)(leftEntity, rightEntity); // PRE: populate the keys
                    if(!rowEntity.isValid) continue; // filter rows with wrong keys
                    @/ check the join type here
                    @if(joinType.equalsIgnoreCase("InnerJoin")){
                        @if(joinOperator.equalsIgnoreCase("!equals")){ // speciall check not NOT EQUALS on strings!
                            if(((rowEntity.@(leftJoinKey)) .equals (rowEntity.@(rightJoinKey)))) @/ Negate of the JOIN operator here!
                        } else {
                            if(!((rowEntity.@(leftJoinKey)) @joinOperator (rowEntity.@(rightJoinKey)))) @/ Negate of the JOIN operator here!
                        }
                            continue; 
                        @if(Mid != null && Mid.size() > 0){
                            rowEntity.midPopulate(); // populate attributes required by the where clause.
                        }
                        @if(Where!= null && !Where.isEmpty()) {
                            if(!rowEntity.isValid || !(@Where)) continue; // check population validity and apply the Where clause. the negate of the where clause is checked here                       
                        } else {
                            if(!rowEntity.isValid) continue; // check population validity only
                        }
                        @/ if no sorting is requested, try applying limits here, otherwise do it when the join is finished
                        @if(skip > -1 && (Ordering == null || Ordering.size() <= 0)){ // if no ordering is imposed and limit.skip is present
                            if(skipped++ < @(skip)) continue;
                        }
                        rowEntity.populate(); // populate the remaining attributes.
                        result.add(rowEntity);
                        @if(take > -1 && (Ordering == null || Ordering.size() <= 0)){
                            if(taken++ >= @(take)) break;
                        }
                    }   
                    else if(joinType.equalsIgnoreCase("LeftOuterJoin")){
                        @if(Mid != null && Mid.size() > 0){
                            rowEntity.midPopulate(); // populate attributes required by the where clause.
                        }
                        @if(Where!= null && !Where.isEmpty()) {
                            if(!rowEntity.isValid || !(@Where)) continue; // check population validity and apply the Where clause. the negate of the where clause is checked here                       
                        } else {
                            if(!rowEntity.isValid) continue; // check population validity only
                        }
                        @/ if no sorting is requested, try applying limits here, otherwise do it when the join is finished
                        @if(skip > -1 && (Ordering == null || Ordering.size() <= 0)){ // if no ordering is imposed and limit.skip is present
                            if(skipped++ < @(skip)) continue;
                        }
                        @if(joinOperator.equalsIgnoreCase("!equals")){ // special check for NOT EQUALS on strings!
                            if(!((rowEntity.@(leftJoinKey)) .equals (rowEntity.@(rightJoinKey)))) @/ JOIN operator here!
                                rowEntity.populate();
                            else
                                rowEntity.populateLeft();
                        } else {
                            if(((rowEntity.@(leftJoinKey)) @joinOperator (rowEntity.@(rightJoinKey)))) @/ JOIN operator here!
                                rowEntity.populate();
                            else
                                rowEntity.populateLeft();
                        }	
                        result.add(rowEntity);
                        @if(take > -1 && (Ordering == null || Ordering.size() <= 0)){
                            if(taken++ >= @(take)) break;
                        }
                    }
                    else if(joinType.equalsIgnoreCase("RightOuterJoin")){
                        @if(Mid != null && Mid.size() > 0){
                            rowEntity.midPopulate(); // populate attributes required by the where clause.
                        }
                        @if(Where!= null && !Where.isEmpty()) {
                            if(!rowEntity.isValid || !(@Where)) continue; // check population validity and apply the Where clause. the negate of the where clause is checked here                       
                        } else {
                            if(!rowEntity.isValid) continue; // check population validity only
                        }
                        @/ if no sorting is requested, try applying limits here, otherwise do it when the join is finished
                        @if(skip > -1 && (Ordering == null || Ordering.size() <= 0)){ // if no ordering is imposed and limit.skip is present
                            if(skipped++ < @(skip)) continue;
                        }
                        @if(joinOperator.equalsIgnoreCase("!equals")){ // special check for NOT EQUALS on strings!
                            if(!((rowEntity.@(leftJoinKey)) .equals (rowEntity.@(rightJoinKey)))) @/ JOIN operator here!
                                rowEntity.populate();
                            else
                                rowEntity.populateRight();                        
                        } else {
                            if(((rowEntity.@(leftJoinKey)) @joinOperator (rowEntity.@(rightJoinKey)))) @/ JOIN operator here!
                                rowEntity.populate();
                            else
                                rowEntity.populateRight();                        
                        }	
                        result.add(rowEntity);
                        @if(take > -1 && (Ordering == null || Ordering.size() <= 0)){
                            if(taken++ >= @(take)) break;
                        }
                    }
                }

            }
            @if(Ordering!= null && Ordering.size() > 0){ // the result should be sorted. in this case, the limit clause has not been applied yet
                result = result.stream().sorted(sorter)
                @if(skip > -1){
                    .skip(@(skip))
                }
                @if(take > -1){
                    .limit(@(take))
                }
                .collect(Collectors.toList());
            }
            return result;
                    
        @//////////////////////////////////////////////////////////////////////
        }
    }

}
