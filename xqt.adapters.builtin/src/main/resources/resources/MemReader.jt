@import xqt.adapters.builtin.*
@import com.vaiona.commons.data.*;
@import com.vaiona.commons.types.*;
@args() {
    String namespace,
    String BaseClassName,
    String SourceRowNamespace,
    String SourceRowType,
    String TargetRowType,
    String Where,
    String rowHeader,
    String linePattern,
    Map<AttributeInfo, String> Ordering,
    Integer skip,
    Integer take,
    boolean writeResultsToFile
}

package @(namespace);

import @(namespace).*;
import @(SourceRowNamespace).*;
import com.vaiona.commons.data.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.logging.Level;
import java.util.logging.Logger;

public class @(BaseClassName)Reader implements DataReader<@(TargetRowType), @(SourceRowType)> {
    BufferedWriter writer;

    
    String  source              = "";
    String  target              = "";
    
    public List<@(TargetRowType)> read(List<@(SourceRowType)> source)  throws FileNotFoundException, IOException {
            //@(SourceRowType) src = new @(SourceRowType)(null);
        @if(Ordering!= null && Ordering.size() > 0) {
        Comparator<@(SourceRowType)> sorter = new Comparator<@(SourceRowType)>() {
                    @@Override
                    public int compare(@(SourceRowType) left, @(SourceRowType) right){
                    @for (Map.Entry<AttributeInfo, String> entry : Ordering.entrySet()) {
                        @{
                            DataTypeInfo dti = TypeSystem.getTypes().get(entry.getKey().conceptualDataType);
                            AttributeInfo ad = entry.getKey();
                        }
                        @if(Ordering.size() == 1) {                            
                            @if(entry.getValue().toUpperCase().equals("ASC")){
                                return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                            } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                            }
                        } else {
                            @if(entry_isFirst){
                                if(@(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name))) != 0){
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            } else if (!entry_isFirst && !entry_isLast) { 
                                else if(@(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name))) != 0){
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            } else if (entry_isLast) {
                                else {
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            }
                        }
                    }
               }
              };
            }
            List<@(TargetRowType)> result = 
            source.stream()
                @if(Where!= null && !Where.isEmpty()) {
                    .filter(p -> (p.isValid == true) && (@Where))
                }
                else{
                    .filter(p -> (p.isValid == true) )
                }

		@if(Ordering!= null && Ordering.size() > 0) {
                   .sorted(sorter)
                }

                @if(skip > -1){
                    .skip(@(skip))
                }
                @if(take > -1){
                    .limit(@(take))
                }
                    .collect(Collectors.toList())
                ;
                return result;
    }

}
